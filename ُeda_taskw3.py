# -*- coding: utf-8 -*-
"""ُEDA TaskW3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JvXK8XDQ9srVY64QzTk7BQoQZSqGhwzA

##EDA
"""

import pandas as pd

# and display 5 random sample rows
df = pd.read_csv("shop_products.csv")
df.sample(5)

# Check for missing values in each column of the DataFrame
df.isnull().sum()

# Display the data type of each column in the DataFrame
df.dtypes

# Identify duplicate rows in the DataFrame (returns True for duplicates)
df.duplicated()

# Generate summary statistics (count, mean, std, min, quartiles, max)
# for numeric columns in the DataFrame
df.describe()

"""## EDA visualization"""

# What does the distribution of product prices look like?
import matplotlib.pyplot as plt

prices = df["shop_price"].dropna()
plt.figure(figsize=(8, 5))
plt.hist(prices, bins=20, edgecolor="black")
plt.xlabel("Price")
plt.ylabel("Frequency")
plt.title("Distribution of Product Prices")
plt.tight_layout()
plt.show()

# Which 10 products have the highest stock quantities?
top10_stock = df.nlargest(10, "shop_stock_qty")[["shop_name","shop_stock_qty"]].dropna()
top10_stock = top10_stock.iloc[::-1]
plt.figure(figsize=(10, 6))
plt.barh(top10_stock["shop_name"], top10_stock["shop_stock_qty"])
plt.xlabel("Stock Quantity")
plt.title("Top 10 Products by Stock")
plt.tight_layout()
plt.show()

# What are the top 10 most common product categories?
cats = (
    df["shop_categories"]
    .dropna()
    .astype(str)
    .str.split(",")
    .explode()
    .str.strip()
)
vc_cats = cats.value_counts().head(10)
plt.figure(figsize=(9, 6))
plt.barh(vc_cats.index[::-1], vc_cats.values[::-1])
plt.xlabel("Count")
plt.title("Top 10 Product Categories")
plt.tight_layout()
plt.show()

# What are the top 10 most common product tags?
tags = (
    df["shop_tags"]
    .dropna()
    .astype(str)
    .str.split(",")
    .explode()
    .str.strip()
)
vc_tags = tags.value_counts().head(10)
plt.figure(figsize=(9, 6))
plt.barh(vc_tags.index[::-1], vc_tags.values[::-1])
plt.xlabel("Count")
plt.title("Top 10 Tags")
plt.tight_layout()
plt.show()

# How many products fall into each price range (Cheap, Mid, Expensive, Luxury)?
bins = [0, 30, 60, 100, df["shop_price"].max()]
labels = ["Cheap","Mid","Expensive","Luxury"]
df["price_bin"] = pd.cut(df["shop_price"], bins=bins, labels=labels, include_lowest=True)
bin_counts = df["price_bin"].value_counts().sort_index()
plt.figure(figsize=(7, 5))
plt.bar(bin_counts.index.astype(str), bin_counts.values)
plt.xlabel("Price Range")
plt.ylabel("Count")
plt.title("Products by Price Range")
plt.tight_layout()
plt.show()

mean_price = df["shop_price"].mean()
above = (df["shop_price"] > mean_price).sum()
below = (df["shop_price"] <= mean_price).sum()
plt.figure(figsize=(6, 4))
plt.bar(["Above Mean","Below Mean"], [above, below])
plt.title("Products Above vs Below Mean Price")
plt.tight_layout()
plt.show()

# Which 10 products have the highest total value (price × stock quantity)?
df["value"] = df["shop_price"].fillna(0) * df["shop_stock_qty"].fillna(0)
top_val = df.nlargest(10,"value")[["shop_name","value"]].iloc[::-1]
plt.figure(figsize=(10, 6))
plt.barh(top_val["shop_name"], top_val["value"])
plt.xlabel("Total Value")
plt.title("Top 10 Products by Value")
plt.tight_layout()
plt.show()

# How does the average product price change across shop pages?
page_mean = df.groupby("shop_page")["shop_price"].mean()
plt.plot(page_mean.index, page_mean.values, marker="o")
plt.xlabel("Page")
plt.ylabel("Average Price")
plt.title("Average Price by Page")
plt.show()

# How are products distributed across categories and price ranges (Cheap, Mid, Expensive, Luxury)?
df["price_bin"] = pd.cut(df["shop_price"], bins=[0,30,60,100,df["shop_price"].max()],
                         labels=["Cheap","Mid","Expensive","Luxury"])
cat_bin = df.groupby(["shop_categories","price_bin"]).size().unstack(fill_value=0)

cat_bin.head(5).plot(kind="bar", stacked=True)
plt.title("Products by Category and Price Bin")
plt.ylabel("Count")
plt.show()

# What is the correlation between product price and stock quantity?
plt.figure(figsize=(4, 3))
mat = df[["shop_price", "shop_stock_qty"]].corr().values
plt.imshow(mat, vmin=-1, vmax=1)
plt.xticks([0,1], ["shop_price","shop_stock_qty"], rotation=45)
plt.yticks([0,1], ["shop_price","shop_stock_qty"])
for i in range(2):
    for j in range(2):
        plt.text(j, i, f"{mat[i,j]:.2f}", ha="center", va="center")
plt.title("Correlation Heatmap")
plt.tight_layout()
plt.show()